import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

public class AviRestTemplate {

    // To Get Subscription.
    public static void main(String[] args) throws ExecutionException, InterruptedException {

        /*ExecutorService executor = Executors.newFixedThreadPool(1);
        Callable callableTask = new GetAviResponse();
        FutureTask subscriptionTask = new FutureTask(callableTask);
        Future future = executor.submit(subscriptionTask);

        while(!future.isDone())
        {
            System.out.println("future not done yet, waiting before retrying...");
            Thread.sleep(300);
        }

        Object o = future.get();
        System.out.println(o);*/




        GetAviResponse callable = new GetAviResponse();

        FutureTask<Integer> futureTask = new FutureTask<Integer>(callable);

        ExecutorService executor = Executors.newFixedThreadPool(1);
        executor.execute(futureTask);

        while (true) {
            try {
                if(!futureTask.isDone()){
                    //wait indefinitely for future task to complete
                    System.out.println("Random Number="+futureTask.get());
                }
            } catch (InterruptedException | ExecutionException e) {
                System.out.println(e);
            }
        }
    }
}




import org.json.JSONException;
import org.json.JSONObject;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Random;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;

public class GetAviResponse implements Callable {

        @Override
        public Integer call() throws Exception {

            // Creating an object of the  Random class
            Random randObj = new Random();

// generating a random number between 0 to 9
            Integer randNo = randObj.nextInt(10);

// the thread is delayed for some random time
            Thread.sleep(randNo * 1000);

// return the object that contains the
// generated random number
            return randNo;
        }
}
